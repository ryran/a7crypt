#!/bin/bash
# a7crypt v0.99b last mod 2011/11/28
# Latest version at <http://github.com/ryran/b19scripts>
# Copyright 2011 Ryan Sawhill <ryan@b19.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# The goal of this project is to make ASCII-armor text-{en,de}cryption more
# accessible and easy to use for people that spend all their time in GUIs.
# It almost goes without saying, but a requirement of this was that security not
# be in any way sacrificed for this convenience.
#
# To that end: no processes are run with arguments of a passphrase, nor are
# passphrases or message data stored on disk; the script creates a working dir
# in ram that is only readable by the current user and whenever message data or
# passphrases need to be stored, they are stored there and deleted as soon as
# they have served their purpose.

# System requirements: zenity and one of either gpg, gpg2, or openssl.
# Also, for /dev/shm, any modern (2.6+) linux kernel should do.
#  
# Feel free to hit me up if you have any questions or suggestions.
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------


## This makes it so that the script doesn't really care what it is named
## Feel free to rename the file--everything else will go along with it
zero=$(basename $0)

## Normally wouldn't do something like this before checking pre-requisites (like
## syntax or app-dependencies), but doing this here made things so much simpler
A7=/dev/shm/.$zero; [[ -d $A7 ]] || mkdir $A7; touch $A7/pass; chmod -R 700 $A7
trap ">$A7/pass; rm $A7/msg* 2>/dev/null" EXIT

## Here we create our preset environments
init_env_GPG2() {
	MODE=GPG2; SWITCH_TO=OpenSSL
	ENCRYPT="gpg2 --batch -ac --force-mdc --passphrase-file $A7/pass $A7/msg"
	DECRYPT="gpg2 --batch -d --passphrase-file $A7/pass --output $A7/msg $A7/msg.asc"
}
init_env_GPG() {
	MODE=GPG; SWITCH_TO=OpenSSL
	ENCRYPT="gpg -ac --force-mdc --passphrase-file $A7/pass $A7/msg"
	DECRYPT="gpg -d --passphrase-file $A7/pass --output $A7/msg $A7/msg.asc"
}
init_env_OPENSSL() {
	MODE=OpenSSL-AES; SWITCH_TO=GPG
	ENCRYPT="openssl aes-256-cbc -a -salt -pass file:$A7/pass -in $A7/msg -out $A7/msg.asc"
	DECRYPT="openssl aes-256-cbc -a -d -pass file:$A7/pass -in $A7/msg.asc -out $A7/msg"
}


##------------------------------------------------------------------------------
## The main framework which everything plugs into                              |
##                                                                             |
MAIN() {                                                                    #---

## Here we warn the user about using OpenSSL, and give a chance to hide warnings
if [[ $MODE = OpenSSL-AES && ! -f /tmp/$zero.nowarn.$UID ]]; then
	echo -en "You're running $zero in OpenSSL mode--either by choice, or because we could not locate GPG/GPG2.\nThis mode uses the command 'openssl aes-256-cbc' to encrypt your text.\nThe corresponding command for decryption is 'openssl aes-256-cbc -a -d' <-- which might be useful to know if you were to lose this app, because OpenSSL doesn't add any pretty info to your encrypted message like GPG, nor is OpenSSL simple-minded enough to decrypt a block of text you pass to it without using the proper arguments." | zenity --text-info --title="$zero [$MODE]: Warning" --cancel-label="Understood, don't tell me for a while" --width=724 --height=210 || touch /tmp/$zero.nowarn.$UID
fi

## GPG sadly will not overwrite files
rm $A7/msg* 2>/dev/null

## Initial main menu choice
CHOICE=$(zenity --list --radiolist --hide-header --title="$zero [$MODE]" --text="What would you like to do?" --column=1 --column=2 TRUE Encrypt FALSE Decrypt FALSE "Switch to $SWITCH_TO-mode" --cancel-label="Quit") ||	exit

## What did the user pick?
if [[ $CHOICE = Encrypt ]]; then
	zenity --text-info --editable --title="$zero [$MODE]: Type or paste text to be encrypted" --width=800 --height=600 --no-wrap >$A7/msg || MAIN
	zenity --entry --title="$zero [$MODE]" --text="Enter passphrase very carefully" --ok-label="Encrypt" >$A7/pass || MAIN
	$ENCRYPT
	>$A7/pass; rm $A7/msg   ## We clear the passphrase & msg buffers ASAP
	zenity --text-info --title="$zero [$MODE]: Your encrypted text" --width=650 --height=600 --no-wrap --cancel-label="Quit" --ok-label="Menu" <$A7/msg.asc || exit
	rm $A7/msg.asc
	MAIN

elif [[ $CHOICE = Decrypt ]]; then
	zenity --text-info --editable --title="$zero [$MODE]: Paste $MODE-encrypted message" --width=650 --height=600 --no-wrap >$A7/msg.asc || MAIN
	zenity --entry --title="$zero [$MODE]" --text "Enter passphrase" --hide-text >$A7/pass || MAIN
	$DECRYPT
	>$A7/pass; rm $A7/msg.asc
	zenity --text-info --title="$zero [$MODE]: Your decrypted text" --width=800 --height=600 --no-wrap --cancel-label="Quit" --ok-label="Menu" <$A7/msg || exit
	rm $A7/msg
	MAIN

else
	if [[ $SWITCH_TO = OpenSSL ]]; then
		if which openssl &>/dev/null; then
			init_env_OPENSSL
		else
			zenity --error --title="Missing OpenSSL" --text="OpenSSL not found in your \$PATH. That's so shocking I almost don't believe it. In any case, if you really want to try it out, you can install it using your software-management application." --width=400
		fi
	elif [[ $SWITCH_TO = GPG ]]; then
		if which gpg2 &>/dev/null; then
			init_env_GPG2
		elif which gpg &>/dev/null; then
			init_env_GPG
		else
			zenity --error --title "Missing GPG" --text 'Neither GPG nor GPG2 were found in your $PATH. You can install either of them using your software-management application.' --width=400
		fi
	fi
	MAIN
fi
}



##------------------------------------------------------------------------------
## BEGINNING                                                                   |
##                                                                             |
if [ $# -ne 0 ]; then                                                       #---
	echo -e "Provides simple symmetric text encryption/decryption using GPG, GPG2, or OpenSSL\nMeant to be run interactively (no args) from the desktop -- Zenity is required"
	exit

elif ! which zenity &>/dev/null; then
	echo -e "This program relies on Zenity (which you don't have) for user-interaction\nYou can easily install it from your software-management app"
	exit 1

elif which gpg2 &>/dev/null; then
	init_env_GPG2

elif which gpg &>/dev/null; then
	init_env_GPG

elif which openssl &>/dev/null; then
	init_env_OPENSSL

else
	zenity --error --title "You pulling my leg?" --text 'Neither GPG, GPG2, nor OpenSSL were found in your $PATH..? Right. If you say so. Use your software-management application to install one of them.' --width=400
	exit 1
fi


MAIN
