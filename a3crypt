#!/bin/bash
# a3crypt v1.2.0 last mod 2014/09/14
# Latest version at <http://github.com/ryran/a7crypt>
# Copyright 2011, 2012, 2014 Ryan Sawhill <ryan@b19.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#------------------------------------------------------------------------------
# This is a simple wrapper for gpg & openssl to do SYMMETRIC TEXT encryption
# from the commandline, in contrast to a7crypt which is much more complicated,
# and makes full use of GUI dialog boxes--even providing file encryption.
#
# There's not much to say. Just run it from a terminal and all will be clear.
#
# a3crypt makes no attempts to work around gpg2's lack of a --no-use-agent
# option, so if you aren't using the OpenSSL mode and you don't have gpg, you
# will get a GUI or TUI password dialog from gpg2. I didn't want to make things
# overly complicated. For a much more advanced Python implementations, look at
# pyrite (GTK gui) at <github.com/ryran/pyrite>.
#------------------------------------------------------------------------------

## Since we're requiring the user to press Ctrl-c to exit, we shouldn't throw a bad exit code (also, whitespace is nice)
trap "{ echo; exit; }" INT

## Query gpg/gpg2 directly to determine version (don't rely on file path)
set_gpg_version() {
    for gpgBinary in gpg gpg2; do
        _gpgVersion=$( ${gpgBinary} --version 2>/dev/null | awk 'NR == 1 {print $3}' )
        case "${_gpgVersion}" in
            1*) mode=GPG1 ; return ;;
            2*) mode=GPG2 ; return ;;
        esac
    done
    return 1
}

run_ui_loop() {
    echo -en "${c_GRY}[${mode}]${c_BLK} Would you like to [${c_RED}e${c_BLK}]ncrypt or [${c_RED}d${c_BLK}]ecrypt? "
    read
    case "${REPLY}" in
        e)
            echo -e "${c_BLU}Steps: enter passphrase, type/paste text, Ctrl-d${ctrlD} to encrypt"
            echo -e "Pressing Ctrl-d on an EMPTY line will make distinguishing encrypted text easier${c_BLK}\n"
            ${encrypt}
            echo -en "\n${c_GRN}DONE! Ctrl-c to exit or Enter to go again${c_BLK}"
            read
            run_ui_loop
            ;;
        d)
            echo -e "${c_BLU}Steps: ${decryptSteps}, Ctrl-d${ctrlD} to decrypt${c_BLK}\n"
            ${decrypt}
            echo -en "\n${c_GRN}DONE! Ctrl-c to exit or Enter to go again${c_BLK}"
            read
            run_ui_loop
            ;;
        *)
            echo "Improper input -- must enter 'e' or 'd'"
            run_ui_loop
    esac
}

main() {
    ## First off, if user requests to use openssl...
    if [[ ${1} == --openssl || ${1} == -o ]]; then
        if command -v openssl >/dev/null; then
            mode=OpenSSL-AES
        else
            echo "Shockingly, you don't appear to have openssl on your system."
            exit 200
        fi
    ## Else if they try to run with help args or something
    elif [[ ${#} -ne 0 ]]; then
        echo "Simple symmetric encryption/decryption using GPG(2) or OpenSSL. Meant to be run"
        echo "interactively w/no args; however, an option of --openssl or -o is supported,"
        echo "which will force use of OpenSSL instead of GPG for both encryption & decryption."
        exit 1
    ## Next up, check for gpg/gpg2 and set MODE appropriately
    elif command -v gpg >/dev/null || command -v gpg2 >/dev/null; then
        set_gpg_version
    ## Finally, if no gpg funness, use openssl
    elif command -v openssl >/dev/null; then
        mode=OpenSSL-AES
    ## If none available, let 'em know
    else
        echo "Neither GPG, GPG2, nor OpenSSL were found in your \$PATH. Shocking."
        exit 255
    fi
    
    ## Set colors
    c_BLK='\E[0m' ; c_RED='\E[1;31m' ; c_BLU='\E[1;34m' ; c_GRN='\E[1;32m' ; c_GRY='\E[1;30m'

    ## Initialize our variables, depending on which mode we're in
    case ${mode} in
        GPG1)
            encrypt="${gpgBinary} --no-use-agent -ac --force-mdc --cipher-algo aes256"
            decrypt="${gpgBinary} --no-use-agent -d"
            decryptSteps="paste GPG-encrypted message, enter passphrase when prompted"
            unset ctrlD
            ;;
        GPG2)
            encrypt="${gpgBinary} -ac --force-mdc --cipher-algo aes256"
            decrypt="${gpgBinary} -d"
            decryptSteps="paste GPG-encrypted message, enter passphrase if prompted (if not prompted, GPG2 agent remembered your passphrase)"
            unset ctrlD
            ;;
        OpenSSL-AES)
            encrypt="openssl aes-256-cbc -salt -a"
            decrypt="openssl aes-256-cbc -d -a"
            decryptSteps="enter passphrase, paste OpenSSL-AES-encrypted message"
            ctrlD=" TWICE"
    esac
    
    ## Kick off main interface
    run_ui_loop
}

main "${@}"
